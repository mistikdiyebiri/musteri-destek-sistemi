generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  name            String?
  email           String   @unique
  emailVerified   DateTime?
  hashedPassword  String?
  image           String?
  role            String   @default("USER")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tickets         Ticket[] @relation("UserTickets")
  assignedTickets Ticket[] @relation("AssignedTickets")
  messages        Message[]
}

model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("OPEN") // OPEN, IN_PROGRESS, CLOSED
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation("UserTickets", fields: [userId], references: [id], onDelete: Cascade)
  assignedToId String?
  assignedTo  User?    @relation("AssignedTickets", fields: [assignedToId], references: [id], onDelete: SetNull)
  departmentId String?
  department  Department? @relation(fields: [departmentId], references: [id])
  messages    Message[]
}

model Department {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tickets   Ticket[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}